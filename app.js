// Generated by CoffeeScript 1.6.2
var Event, FloorStats, Que, Visits, app, config, eventLogger, express, io, mail, models, mongoStore, mongoose, nodemailer, path, pushAnalytics, routes, smtpTransport;

express = require('express');

mongoose = require('mongoose');

mongoStore = require('connect-mongodb');

routes = require('./routes');

path = require('path');

models = require('./models');

config = require('./config');

nodemailer = require("nodemailer");

eventLogger = require("./event-logger");

app = express();

Event = null;

FloorStats = null;

Visits = null;

Que = null;

app.configure(function() {
  app.set('port', process.env.PORT || config.server.port);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(express.session({
    store: mongoStore(app.set('db-uri')),
    secret: 'topsecret'
  }));
  app.use(express.logger({
    format: '\x1b[1m:method\x1b[0m \x1b[33m:url\x1b[0m :response-time ms'
  }));
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express["static"](path.join(__dirname, 'public')));
  app.use(function(err, req, res, next) {
    console.log(err);
    return res.send(404, "FUCK 4-0-4");
  });
  return app.use(function(req, res) {
    console.log("Page not found 404");
    return res.send(404, "FUCK 4-0-4");
  });
});

app.configure('development', function() {
  app.set('db-uri', config.db.URL);
  app.use(express.errorHandler({
    dumpExceptions: true
  }));
  return app.set('view options', {
    pretty: true
  });
});

app.configure('test', function() {
  app.set('db-uri', config.db.URL);
  return app.set('view options', {
    pretty: true
  });
});

app.configure('production', function() {
  return app.set('db-uri', config.db.URL);
});

models.defineModels(mongoose, function() {
  var db;

  app.Event = Event = mongoose.model('Event');
  app.FloorStats = FloorStats = mongoose.model('FloorStats');
  app.Visits = Visits = mongoose.model('Visits');
  app.Que = Que = mongoose.model('Que');
  return db = mongoose.connect(app.set('db-uri'));
});

io = require('socket.io').listen(app.listen(app.get('port'), function() {
  return console.log("Express server listening on port " + app.get('port'));
}));

app.get('/', routes.index);

app.get('/partials/:name', routes.partials);

app.post('/api/event', function(req, res) {
  var event, mailOptions, mailto, params;

  params = req.body;
  mailOptions = {
    from: "So You Gotta Go <soYouGottaGo@gottaGo.medu.com>",
    bcc: "",
    subject: "A Bathroom on the " + params.floor + "nd floor is available!!",
    text: "A Bathroom on the " + params.floor + "nd is available!! "
  };
  mailto = [];
  event = new Event({
    'floor': params.floor,
    'room': params.room,
    'status': params.status
  });
  io.sockets.emit('event', event);
  if (parseInt(event.status) === 0) {
    Que.find({
      'floor': event.floor
    }, {}, {
      sort: {
        'time': -1
      }
    }).exec(function(err, que) {
      var person, _i, _len;

      if (err != null) {
        return false;
      }
      for (_i = 0, _len = que.length; _i < _len; _i++) {
        person = que[_i];
        mailto.push("<" + person.contact + ">");
      }
      mailOptions.bcc = mailto.join(",");
      mailOptions.text = "A Bathroom on the " + event.floor + "nd is available!! \n ";
      if (mailto.length > 1) {
        mailOptions.text += "This message was sent to " + mailto.length + " humans. SO HURRY!";
      }
      mail(mailOptions, function(err) {});
      Que.find().remove();
      return io.sockets.emit('que', {
        floor: event.floor,
        count: 0
      });
    });
  }
  return eventLogger.logEvent(event, req, res, Event, FloorStats, Visits, function() {
    return pushAnalytics();
  });
});

smtpTransport = nodemailer.createTransport("SMTP", {
  service: "medu",
  host: "mail1.medu.com"
});

mail = function(mailOptions, callback) {
  return smtpTransport.sendMail(mailOptions, function(error, response) {
    if (error) {
      console.log(error);
      callback(error);
    } else {
      console.log("Message sent: " + response.message);
      callback();
    }
    return smtpTransport.close();
  });
};

app.post('/api/que/:floor', function(req, res) {
  var floor, params, que;

  params = req.body;
  floor = req.params.floor;
  que = new Que({
    'floor': floor,
    'status': 1,
    'contact': params.contact
  });
  return que.validate(function(validationErr) {
    return que.save(function(err) {
      if (err != null) {
        res.statusCode = 400;
        return res.send({
          message: "Invalid Email"
        });
      } else {
        Que.count({
          floor: floor
        }, function(err, count) {
          if (count == null) {
            count = 0;
          }
          return io.sockets.emit('que', {
            floor: floor,
            count: count
          });
        });
        res.statusCode = 200;
        return res.send("OK");
      }
    });
  });
});

app.get('(!public)*', routes.index);

io.sockets.on('connection', function(socket) {
  var checklistObject, queObj, statusArray;

  statusArray = [[], []];
  queObj = {};
  checklistObject = {};
  return Event.aggregate({
    $group: {
      _id: {
        floor: '$floor',
        room: '$room',
        status: '$status'
      },
      time: {
        $max: '$time'
      }
    }
  }, {
    $sort: {
      time: -1
    }
  }, {
    $project: {
      floor: "$_id.floor",
      room: "$_id.room",
      status: "$_id.status",
      time: "$time"
    }
  }, function(err, currentStatusArray) {
    /*
    			[ { _id: { floor: 2, room: 'b', status: 0 },
    			    time: Fri Aug 02 2013 13:39:34 GMT-0700 (PDT) },
    			  { _id: { floor: 2, room: 'b', status: 1 },
    			    time: Fri Aug 02 2013 13:39:14 GMT-0700 (PDT) },
    			  { _id: { floor: 2, room: 'a', status: 1 },
    			    time: Fri Aug 02 2013 13:39:01 GMT-0700 (PDT) },
    			  { _id: { floor: 3, room: 'a', status: 0 },
    			    time: Wed Jul 31 2013 16:37:17 GMT-0700 (PDT) },
    			  { _id: { floor: 3, room: 'a', status: 1 },
    			    time: Wed Jul 31 2013 16:36:55 GMT-0700 (PDT) },
    			  { _id: { floor: 2, room: 'a', status: 0 },
    			    time: Fri Jul 26 2013 11:00:36 GMT-0700 (PDT) } ]
    */

    var floor, floorArrayIndex, index, roomEvent, statusArrayIndex, _i, _j, _len, _len1, _ref, _results;

    for (_i = 0, _len = currentStatusArray.length; _i < _len; _i++) {
      roomEvent = currentStatusArray[_i];
      if (!checklistObject[roomEvent.floor + roomEvent.room]) {
        statusArrayIndex = roomEvent.floor === 2 ? 0 : 1;
        floorArrayIndex = roomEvent.room === 'a' ? 0 : 1;
        checklistObject[roomEvent.floor + roomEvent.room] = true;
        statusArray[statusArrayIndex].splice(floorArrayIndex, 0, roomEvent);
      }
    }
    console.log(statusArray);
    _ref = config.floors;
    _results = [];
    for (index = _j = 0, _len1 = _ref.length; _j < _len1; index = ++_j) {
      floor = _ref[index];
      _results.push(Que.count({
        floor: floor
      }, function(err, count) {
        if (count == null) {
          count = 0;
        }
        queObj[floor] = count;
        console.log(floor, count, queObj);
        if (index === config.floors.length) {
          pushAnalytics();
          return io.sockets.emit('init', {
            floorsArray: statusArray,
            queObj: queObj
          });
        }
      }));
    }
    return _results;
  });
});

pushAnalytics = function() {
  return Visits.aggregate({
    $match: {
      duration: {
        $gt: 20000,
        $lt: 3600000
      }
    }
  }, {
    "$group": {
      _id: "$floor",
      averagedur: {
        $avg: "$duration"
      }
    }
  }, {
    $sort: {
      _id: 1
    }
  }, function(err, res) {
    var date, month, today;

    if (err) {
      return handleError(err);
    }
    date = new Date();
    today = date.getDate();
    month = date.getMonth();
    return Visits.aggregate({
      $match: {
        day: {
          $gt: today - 1
        },
        month: month
      }
    }, {
      $match: {
        duration: {
          $gt: 20000,
          $lt: 3600000
        }
      }
    }, {
      "$group": {
        _id: {
          floor: "$floor",
          room: "$room"
        },
        requests: {
          $sum: 1
        }
      }
    }, {
      $sort: {
        _id: 1
      }
    }, function(err, res2) {
      var reqPerHourArray;

      reqPerHourArray = [];
      return Visits.aggregate({
        $match: {
          floor: 2,
          duration: {
            $gt: 20000,
            $lt: 3600000
          }
        }
      }, {
        "$group": {
          _id: "$hour",
          requests: {
            $sum: 1
          }
        }
      }, {
        $sort: {
          requests: -1
        }
      }, function(err, res3) {
        var hour, reqPerHourObj, _i, _len, _ref;

        reqPerHourObj = {};
        for (_i = 0, _len = res3.length; _i < _len; _i++) {
          hour = res3[_i];
          reqPerHourObj[hour._id] = hour.requests;
        }
        reqPerHourObj.top = (_ref = res3[0]) != null ? _ref.requests : void 0;
        reqPerHourArray.push(reqPerHourObj);
        return Visits.aggregate({
          $match: {
            floor: 3,
            duration: {
              $gt: 20000,
              $lt: 3600000
            }
          }
        }, {
          "$group": {
            _id: "$hour",
            requests: {
              $sum: 1
            }
          }
        }, {
          $sort: {
            requests: -1
          }
        }, function(err, res4) {
          var _j, _len1, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

          reqPerHourObj = {};
          for (_j = 0, _len1 = res4.length; _j < _len1; _j++) {
            hour = res4[_j];
            reqPerHourObj[hour._id] = hour.requests;
          }
          reqPerHourObj.top = (_ref1 = res4[0]) != null ? _ref1.requests : void 0;
          reqPerHourArray.push(reqPerHourObj);
          return io.sockets.emit('analytics', {
            stats: [
              {
                reqPerHour: reqPerHourArray[0],
                averageDur: (_ref2 = res[0]) != null ? _ref2.averagedur : void 0,
                todayVisits: {
                  a: (_ref3 = res2[0]) != null ? _ref3.requests : void 0,
                  b: (_ref4 = res2[1]) != null ? _ref4.requests : void 0
                }
              }, {
                reqPerHour: reqPerHourArray[1],
                averageDur: (_ref5 = res[1]) != null ? _ref5.averagedur : void 0,
                todayVisits: {
                  a: (_ref6 = res2[2]) != null ? _ref6.requests : void 0,
                  b: (_ref7 = res2[3]) != null ? _ref7.requests : void 0
                }
              }
            ]
          });
        });
      });
    });
  });
};
