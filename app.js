// Generated by CoffeeScript 1.6.2
var Event, app, config, express, http, models, mongoStore, mongoose, path;

express = require('express');

mongoose = require('mongoose');

mongoStore = require('connect-mongodb');

http = require('http');

path = require('path');

models = require('./models');

config = require('./config');

app = express();

Event = null;

app.configure(function() {
  app.set('port', process.env.PORT || config.server.port);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(express.session({
    store: mongoStore(app.set('db-uri')),
    secret: 'topsecret'
  }));
  app.use(express.logger({
    format: '\x1b[1m:method\x1b[0m \x1b[33m:url\x1b[0m :response-time ms'
  }));
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express["static"](path.join(__dirname, 'public')));
  app.use(function(err, req, res, next) {
    console.log(err);
    return res.send(404, "FUCK 4-0-4");
  });
  return app.use(function(req, res) {
    console.log("Page not found 404");
    return res.send(404, "FUCK 4-0-4");
  });
});

app.configure('development', function() {
  app.set('db-uri', config.db.URL);
  app.use(express.errorHandler({
    dumpExceptions: true
  }));
  return app.set('view options', {
    pretty: true
  });
});

app.configure('test', function() {
  app.set('db-uri', config.db.URL);
  return app.set('view options', {
    pretty: true
  });
});

app.configure('production', function() {
  return app.set('db-uri', config.db.URL);
});

models.defineModels(mongoose, function() {
  var db;

  app.Event = Event = mongoose.model('Event');
  return db = mongoose.connect(app.set('db-uri'));
});

app.get('/', function(req, res) {
  return Event.find(function(err, events) {
    res.type('text/json');
    return res.send(events);
  });
});

app.post('/api/event', function(req, res) {
  var event, params;

  params = req.body;
  event = new Event({
    'floor': params.floor,
    'room': params.room,
    'status': params.status
  });
  return event.save(function(err) {
    if (err != null) {
      res.statusCode = 400;
      return res.send("Error");
    } else {
      res.statusCode = 200;
      return res.send("OK");
    }
  });
});

http.createServer(app).listen(app.get('port'), function() {
  return console.log("Express server listening on port " + app.get('port'));
});
